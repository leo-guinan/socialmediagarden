// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  avatar         String?
  role           GlobalRole
  clientAccountId Int?
  memberships Membership[]
  tokens   Token[]
  sessions Session[]
  savedFeeds     Feed[]
  readContent   Content[] @relation("ReadContent")
  savedContent Content[] @relation("SavedContent")
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  // See note below about TokenType enum
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
enum TokenType {
   RESET_PASSWORD
}
model Organization {
  id         Int @id @default(autoincrement())
  name       String
  stripeCustomerId String? @unique
  subscriptionStatus String?
  subscriptionId  String?
  plan Plan @relation(fields: [planId], references: [id])
  planId Int
  membership Membership[]
  gardens Garden[]
}

model Membership {
  id             Int @id @default(autoincrement())
  role           MembershipRole

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  user           User? @relation(fields: [userId], references: [id])
  userId         Int?

  // When the user joins, we will clear out the name and email and set the user.
  invitedName  String?
  invitedEmail String?

  @@unique([organizationId, invitedEmail])
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

// The owners of the SaaS (you) can have a SUPERADMIN role to access all data
enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

enum Interval {
  MONTHLY
  ANNUAL
  LIFETIME
}

model Plan {
  id         Int @id @default(autoincrement())
  name       String
  price      Int
  interval   Interval?
  stripePlanId String?
  organization Organization[]
}

model Garden {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  slug        String   @unique
  owner       Organization     @relation(fields: [ownerId], references: [id])
  ownerId     Int
  name        String       @default("My Garden")
  public      Boolean
  image       String?
  featuredContent Content? @relation(fields: [featuredContentId], references: [id])
  featuredContentId Int?
  feeds       Feed[]
}

model Feed {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  feed        String   @unique
  type        FeedType @default(YOUTUBE)
  savedBy     User[]
  content     Content[]
  backendFeedId Int?
  gardens     Garden[]
}

model Content {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String?
  description String?
  link        String
  image       String?
  feed        Feed?     @relation(fields: [feedId], references: [id])
  feedId      Int?
  backendContentId Int?
  readBy      User[]   @relation("ReadContent")
  savedBy     User[]   @relation("SavedContent")
  featuredIn  Garden[]

  @@unique([feedId, backendContentId], name: "feed_content")
}




enum FeedType {
  BLOG
  YOUTUBE
  VIDEO
  PODCAST
}

